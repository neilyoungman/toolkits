1.mybatis逆向生成mapper/entity:
	0.整合依赖
		//springmvc
		
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.30</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.9</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core -->
		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.4.1</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>5.3.1</version>
		</dependency>
		
		//springboot
		
		<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.4.5</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.2.2</version>
		</dependency>


 



	1.generator.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE generatorConfiguration
		  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

		<generatorConfiguration>
			<context id="testTables" targetRuntime="MyBatis3">
				<commentGenerator>
					<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
					<property name="suppressAllComments" value="true" />
				</commentGenerator>
				<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
				<jdbcConnection driverClass="com.mysql.jdbc.Driver"
					connectionURL="jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8" 
					userId="root"
					password="123">
				</jdbcConnection>
				<!-- <jdbcConnection driverClass="oracle.jdbc.OracleDriver"
					connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:yycg" 
					userId="yycg"
					password="yycg">
				</jdbcConnection> -->

				<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
					NUMERIC 类型解析为java.math.BigDecimal -->
				<javaTypeResolver>
					<property name="forceBigDecimals" value="false" />
				</javaTypeResolver>

				<!-- targetProject:生成PO类的位置 -->
				<javaModelGenerator targetPackage="com.iot.ssm.po"
					targetProject=".\src">
					<!-- enableSubPackages:是否让schema作为包的后缀 -->
					<property name="enableSubPackages" value="false" />
					<!-- 从数据库返回的值被清理前后的空格 -->
					<property name="trimStrings" value="true" />
				</javaModelGenerator>
				<!-- targetProject:mapper映射文件生成的位置 -->
				<sqlMapGenerator targetPackage="com.iot.ssm.mapper" 
					targetProject=".\src">
					<!-- enableSubPackages:是否让schema作为包的后缀 -->
					<property name="enableSubPackages" value="false" />
				</sqlMapGenerator>
				<!-- targetPackage：mapper接口生成的位置 -->
				<javaClientGenerator type="XMLMAPPER"
					targetPackage="com.iot.ssm.mapper" 
					targetProject=".\src">
					<!-- enableSubPackages:是否让schema作为包的后缀 -->
					<property name="enableSubPackages" value="false" />
				</javaClientGenerator>
				<!-- 指定数据库表 -->
				<table tableName="items"></table>
				<table tableName="orders"></table>
				<table tableName="orderdetail"></table>
				<table tableName="user"></table>
				<!-- <table schema="" tableName="sys_user"></table>
				<table schema="" tableName="sys_role"></table>
				<table schema="" tableName="sys_permission"></table>
				<table schema="" tableName="sys_user_role"></table>
				<table schema="" tableName="sys_role_permission"></table> -->
				
				<!-- 有些表的字段需要指定java类型
				 <table schema="" tableName="">
					<columnOverride column="" javaType="" />
				</table> -->
			</context>
		</generatorConfiguration>
		
	2. generator.java:
		public class Generator {
			public static void main(String[] args) throws Exception {
				//MBG 执行过程中的警告信息
				List<String> warnings = new ArrayList<String>();
				//当生成的代码重复时，覆盖原代码
				boolean overwrite = true;
				//读取我们的 MBG 配置文件
				InputStream is = Generator.class.getResourceAsStream("/generatorConfig.xml");
				ConfigurationParser cp = new ConfigurationParser(warnings);
				Configuration config = cp.parseConfiguration(is);
				is.close();

				DefaultShellCallback callback = new DefaultShellCallback(overwrite);
				//创建 MBG
				MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
				//执行生成代码
				myBatisGenerator.generate(null);
				//输出警告信息
				for (String warning : warnings) {
					System.out.println(warning);
				}
			}
		}